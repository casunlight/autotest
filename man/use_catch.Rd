% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test-compiled-code.R
\name{use_catch}
\alias{use_catch}
\title{Use Catch for C++ Unit Testing}
\usage{
use_catch(dir = getwd())
}
\arguments{
\item{dir}{The directory containing an \R package.}
}
\description{
Add the necessary infrastructure to enable C++ unit testing
in \R packages with
\href{https://github.com/philsquared/Catch}{Catch} and `autotest`.
}
\details{
Calling `use_catch()` will:

1. Create a file `src/test-runner.cpp`, which ensures that the
   `autotest` package will understand how to run your package's
   unit tests,

2. Create an example test file `src/test-example.cpp`, which
   showcases how you might use Catch to write a unit test, and

3. Add a test file `tests/autotest/test-cpp.R`, which ensures that
   `autotest` will run your compiled tests during invocations of
   `devtools::test()` or `R CMD check`.

C++ unit tests can be added to C++ source files within the
`src` directory of your package, with a format similar
to \R code tested with `autotest`. Here's a simple example
of a unit test written with `autotest` + Catch:

\preformatted{
context("C++ Unit Test") {
  test_that("two plus two is four") {
    int result = 2 + 2;
    expect_true(result == 4);
  }
}
}

When your package is compiled, unit tests alongside a harness
for running these tests will be compiled into your \R package,
with the C entry point `run_autotest_tests()`. `autotest`
will use that entry point to run your unit tests when detected.
}
\section{Functions}{


All of the functions provided by Catch are
available with the `CATCH_` prefix -- see
\href{https://github.com/philsquared/Catch/blob/master/docs/assertions.md}{here}
for a full list. `autotest` provides the
following wrappers, to conform with `autotest`'s
\R interface:

\tabular{lll}{
\strong{Function} \tab \strong{Catch} \tab \strong{Description} \cr
`context` \tab `CATCH_TEST_CASE` \tab The context of a set of tests. \cr
`test_that` \tab `CATCH_SECTION` \tab A test section. \cr
`expect_true` \tab `CATCH_CHECK` \tab Test that an expression evaluates to `true`. \cr
`expect_false` \tab `CATCH_CHECK_FALSE` \tab Test that an expression evalutes to `false`. \cr
`expect_error` \tab `CATCH_CHECK_THROWS` \tab Test that evaluation of an expression throws an exception. \cr
`expect_error_as` \tab `CATCH_CHECK_THROWS_AS` \tab Test that evaluation of an expression throws an exception of a specific class. \cr
}

In general, you should prefer using the `autotest`
wrappers, as `autotest` also does some work to
ensure that any unit tests within will not be compiled or
run when using the Solaris Studio compilers (as these are
currently unsupported by Catch). This should make it
easier to submit packages to CRAN that use Catch.
}

\section{Advanced Usage}{


If you'd like to write your own Catch test runner, you can
instead use the `autotest::catchSession()` object in a file
with the form:

\preformatted{
#define TESTTHAT_TEST_RUNNER
#include <autotest.h>

void run()
{
    Catch::Session& session = autotest::catchSession();
    // interact with the session object as desired
}
}

This can be useful if you'd like to run your unit tests
with custom arguments passed to the Catch session.
}

\section{Standalone Usage}{


If you'd like to use the C++ unit testing facilities provided
by Catch, but would prefer not to use the regular `autotest`
\R testing infrastructure, you can manually run the unit tests
by inserting a call to:

\preformatted{
.Call("run_autotest_tests", PACKAGE = <pkgName>)
}

as necessary within your unit test suite.
}
\seealso{
\href{https://github.com/philsquared/Catch}{Catch}, the
  library used to enable C++ unit testing.
}

