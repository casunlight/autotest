[{"ans_code": "# Your test Answer\nfibonacci_sum = 2\nf_left = 1\nf_right = 2\nfibonacci_num = 0\nwhile (fibonacci_num <= 4e6) {\n  fibonacci_num = f_left + f_right\n  f_left = f_right\n  f_right = fibonacci_num\n  if (fibonacci_num %% 2 == 0){\n    fibonacci_sum = fibonacci_sum + fibonacci_num\n  }\n}\n# cat(fibonacci_sum)", "test_code": "library(autotest)\n\ncorrect_answer = 4613732\ntest_that(\"Check answer\", {\n\texpect_equal(fibonacci_sum, correct_answer, tolerance=1e-15)\n})", "id": "57bb16213e0f191000e3d07e", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "# Your test Answer\n# 0. read data, the path is '/data/TimesSquareSignage.csv'\nts_data = read.csv('/data/TimesSquareSignage.csv', stringsAsFactors=FALSE)\n\n# 1. number of rows and columns\nrow_num = nrow(ts_data)\ncol_num = ncol(ts_data)\n\n# 2. The type of each variable, should be a vector of characters\nvar_types = sapply(ts_data, class)\n\n# 3. How many missing values are there in the dataset?\nnum_missing = sum(is.na(ts_data))\n\n# 4. Which rows (people) have missing value? Which columns (variables) include missing value?\nrow_missing = which(rowSums(is.na(ts_data)) != 0) # which(!complete.cases(ts_data))# a vector of integer\ncol_missing = names(ts_data)[which(colSums(is.na(ts_data)) != 0)]  # a vector contain the variable names which has missing value", "test_code": "# Test code goes here!\nlibrary(autotest)\ncontext(\"TimesSquareSignage\")\n\ncorrect_row_num = 184\ncorrect_col_num = 18\ntest_that(\"test row_num\", {\n  expect_true(row_num == correct_row_num)\n  expect_true(col_num == correct_col_num)\n})\n\ncorrect_var_types = sapply(ts_data, class)\ntest_that(\"test var_types\", {\n  expect_equal(var_types, correct_var_types)\n})\n\ncorrect_num_missing = 520\ntest_that(\"test num_missing\", {\n  expect_true(num_missing == correct_num_missing)\n})\n\ncorrect_row_missing = which(rowSums(is.na(ts_data)) != 0)\ntest_that(\"test row_missing\", {\n  expect_true(setequal(row_missing, correct_row_missing))\n})\n\ncorrect_col_missing = c(\"Width\", \"X__Height\", \"X_.\", \"X_Width\", \"X_Height\", \"X_SF\")\ntest_that(\"test col_missing\", {\n  expect_true(setequal(col_missing, correct_col_missing))\n})", "id": "57bb51c06f869510001a9f79", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "#Your test Answer\nts_data = read.csv('/data/TimesSquareSignage.csv', stringsAsFactors=FALSE)\n\n# 1. Observations from Upper Broadway\ndata_UpperBroadway = ts_data[ts_data$Location == 'Upper Bway',]\n\n# 2. Observations with greater-than-average square footage\ndata_largerFootage = ts_data[ts_data$SF > mean(ts_data$SF), ]\n\n# 3. The name, address and location of the top 10 observations in terms of total square footage\ndata_top10 = head(ts_data[order(ts_data$TOTAL.SF, decreasing = TRUE), c(1, 2, 4, 17)], 10)", "test_code": "library(autotest)\ncontext('Explore TimesSquareSignage')\ntest_that('Observations from Upper Broadway', {\n  expect_true(all(data_UpperBroadway$Location == 'Upper Bway'))\n  expect_equal(dim(data_UpperBroadway), c(28, 18))\n})\n\ntest_that(\"Observations with greater-than-average square footage\", {\n  expect_equal(dim(data_largerFootage), c(57, 18))\n  expect_true(min(data_largerFootage$SF) >= 2013.25)\n})\n\ntest_that(\"Top 10 observations in terms of total square footage\", {\n  expect_equal(dim(data_top10), c(10, 4))\n  expect_equal(colnames(data_top10), c(\"Screen.Name..LED...Vinyl.Signs.\",\n                                       \"Building.Address\",\n                                       \"Location\", \"TOTAL.SF\"))\n  expect_true(min(data_top10$TOTAL.SF) >= 7000)\n})", "id": "57bb5761611a2c100033f2a1", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "# 1. Import the built-in data by running data(cars)\ndata(cars)\n\n# 2. Find out the first 5 observations from cars.\ncars_head5 = head(cars, 5)\n\n# 3. Randomly generate a vector as long as the number of rows in cars, and have elements NY, CA or CT. Call the vector state.\nstate = sample(c('NY', 'CA', 'CT'), nrow(cars), replace=TRUE)\n\n# 4. Add state to the data frame cars as a new column. Again name the column state.\ncars$state = state\n\n# 5. Create a new column ratio whose value is the ratio dist/speed. Then compute the average and standard deviation.\ncars$ratio = cars$dist / cars$speed\nmean_ratio = mean(cars$ratio)\nstd_ratio = sd(cars$ratio)\n", "test_code": "library(autotest)\ncontext(\"cars\")\ncorrect_cars_head5 = head(cars[, c('speed', 'dist')], 5)\n\ntest_that(\"test cars_head5\", {\n  expect_equal(nrow(cars_head5), 5)\n  expect_equal(cars_head5, correct_cars_head5)\n})\n\ntest_that(\"test state\", {\n  expect_length(state, nrow(cars))\n  expect_true(setequal(unique(state), c('NY', 'CA', 'CT')))\n})\n\ncorrect_ratio = cars$dist / cars$speed\ntest_that(\"test state and state column in cars\", {\n  expect_true('state' %in% colnames(cars))\n  expect_true('ratio' %in% colnames(cars))\n  expect_equal(cars$state, state)\n  expect_equal(cars$ratio, correct_ratio)\n})\n\ncorrect_mean_ratio = 2.632496\ncorrect_std_ratio = 1.068006\ntest_that(\"test mean and standard deviation of cars$radio\", {\n  expect_equal(mean_ratio, correct_mean_ratio, tolerance=1e-6)\n  expect_equal(std_ratio, correct_std_ratio, tolerance=1e-6)\n})\n", "id": "57bb5c9bf42b3c1000ce8857", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "# Your test Answer\nmat_vec_multiply <- function(mat, vec){\n\t# fill in your code(Note: return a vector, not matrix)\n  \tas.vector(mat %*% vec)\n}", "test_code": "library(autotest)\ntest_that(\"test mat_vec_multiply\", {\n    m = matrix(rnorm(9), 3)\n    v = rnorm(3)\n    ans = c(m %*% v)\n    expect_equal(mat_vec_multiply(matrix(1:9, 3), 1:3), c(30, 36, 42))\n    expect_equal(mat_vec_multiply(matrix(1:9, 3), 3:1), c(18, 24, 30))\n    expect_equal(mat_vec_multiply(m, v), ans)\n})", "id": "57bc591bc4e8431000be9ff3", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "#Your test Answer\nmy_mad = function(v) {\n  return(median(abs(v - median(v)))) \n}", "test_code": "my_mad_correct = function(v) {\n  return(median(abs(v - median(v)))) \n}\nlibrary(autotest)\ntest_that(\"test mat_vec_multiply\", {\n    random_input = rnorm(100)\n    expect_is(my_mad, 'function')\n    expect_equal(my_mad(1:9), 2)\n    expect_equal(my_mad(1:100), 25)\n    expect_equal(my_mad(random_input), my_mad_correct(random_input))\n})", "id": "57bc603ac4e8431000be9ff4", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "# Your test Answer\ngenerate_email <- function(name_str) {\n  name_vec = unlist(strsplit(name_str, ' '))\n  name_vec = grep('[a-zA-Z0-9]+', name_vec, value=T)\n  if (length(name_vec) == 0) return('')\n  paste(name_vec,\"gmail.com\",sep=\"@\",collapse = ';')\n}\n\n", "test_code": "library(autotest)\ntest_that('test generate_email', {\n  \texpect_equal(generate_email(\"John\"), \"John@gmail.com\")\n    expect_equal(generate_email('Janet Luke'), 'Janet@gmail.com;Luke@gmail.com')\n})\n\ntest_that('test generate_email', {\n    expect_equal(generate_email('      '), '')\n})\ntest_that('test generate_email', {\n\texpect_equal(generate_email(\"  John Andrew Thomas   \"), \"John@gmail.com;Andrew@gmail.com;Thomas@gmail.com\")\n})\n\n\n", "id": "57bc6872c4e8431000be9ff6", "pre_code": "# Code need to be loaded before!"}, {"ans_code": "library(dplyr)\n# 1.load ggplot2 and mpg data\nlibrary(ggplot2)\n# 2.Obtain a subset and rename vriables\nsub_mpg = mpg %>% select(V1 = year, V2 = cyl, V3 = cty, V4 = hwy)\n\n# 3.obtain the average of city miles per gallon and highway miles per gallon for different numbers of cylinders\navg_mpg = mpg %>%\n  group_by(cyl) %>%\n  summarise(meanCty = mean(cty),\n            meanHwy = mean(hwy))\n\n# 4.For manufacturer, identify the car(s) that have the largest city miles per gallon\ntop_manufacturer = tbl_df(mpg) %>% \n    group_by(manufacturer) %>%\n    summarise(max_cty=max(cty)) %>%\n    arrange(desc(max_cty))", "test_code": "library(autotest)\n\ntest_that(\"test sub_mpg\", {\n    expect_is(sub_mpg, 'tbl_df')\n    expect_equal(sort(colnames(sub_mpg)), paste0(\"V\", 1:4))\n})\n\ncorrect_avg_mpg = mpg %>% group_by(cyl) %>% summarise(meanCty = mean(cty), meanHwy = mean(hwy))\ntest_that(\"test avg_mpg\", {\n    expect_is(avg_mpg, 'tbl_df')\n    expect_equal(avg_mpg, correct_avg_mpg)\n})\n\ncorrect_top_manufacturer = mpg %>% group_by(manufacturer) %>% summarise(max_cty=max(cty)) %>% arrange(desc(max_cty))\n\ntest_that(\"test top_manufacturer\", {\n    expect_is(top_manufacturer, 'tbl_df')\n    expect_equal(top_manufacturer, correct_top_manufacturer)\n})", "id": "57bcb17acf80521000b06925", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "# Your test Answer\n# 0. load ggplot2\nlibrary(dplyr)\nlibrary(ggplot2)\n# 1. a new variable ratioHVE & # 2. a new variable ratioCVE\nmpg = mutate(mpg, ratioHVE = hwy / displ, ratioCVE = cty / displ)\n\n# 3. the average ratioHVE and ratioCVE by different years and manufacturers\navg_mpg = mpg %>% group_by(year, manufacturer) %>% summarise(avg_ratioHVE = mean(ratioHVE), avg_ratioCVE = mean(ratioCVE))\n\n# 4. the biggest ratioHVE by different years and drv\nbig_ratioHVE = mpg %>% group_by(year, drv) %>% summarise(max_ratioHVE = max(ratioHVE))\n", "test_code": "library(autotest)\ntest_that(\"test new variables ratioHVE and ratioCVE\", {\n  ratioHVE = mpg$hwy / mpg$displ\n  ratioCVE = mpg$cty / mpg$displ\n  expect_is(mpg, 'tbl_df')\n  expect_true('ratioHVE' %in% colnames(mpg))\n  expect_true('ratioCVE' %in% colnames(mpg))\n  expect_equal(mpg$ratioHVE, ratioHVE)\n  expect_equal(mpg$ratioCVE, ratioCVE)\n})\n\ncorrect_avg_mpg = mpg %>% group_by(year, manufacturer) %>% summarise(avg_ratioHVE = mean(ratioHVE), avg_ratioCVE = mean(ratioCVE))\n\ntest_that(\"test average ratioHVE and ratioCVE\", {\n  expect_is(avg_mpg, 'tbl_df')\n  expect_equal(avg_mpg, correct_avg_mpg)\n})\ncorrect_big_ratioHVE = mpg %>% group_by(year, drv) %>% summarise(max_ratioHVE = max(ratioHVE))\n\ntest_that(\"test the biggest ratioHVE\", {\n  expect_is(big_ratioHVE, 'tbl_df')\n  expect_equal(big_ratioHVE, correct_big_ratioHVE)\n})", "id": "57bcbe1fe1fd8210008274cb", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "###Your code here!\nlibrary(dplyr)\nnyc_job = read.csv('/data/NYC_Jobs.csv', stringsAsFactors=FALSE)\n# 1. \ntmp = as.numeric(plyr::mapvalues(nyc_job$Salary.Frequency, c('Annual', 'Daily', 'Hourly'), c(1, 260, 2080)))\nsalary_summary = nyc_job %>% mutate(annual_salary_from = tmp * Salary.Range.From,\n                                    annual_salary_to = tmp * Salary.Range.To) %>% \n                group_by(Agency) %>% \n                summarise(mean_salary_from = mean(annual_salary_from), \n                          median_salary_from = median(annual_salary_from), \n                          mean_salary_to = mean(annual_salary_to), \n                          median_salary_to = median(annual_salary_to)) \n\n# 2. \nagency_best = salary_summary %>% arrange(-mean_salary_from) %>% .[[1, 'Agency']]\n", "test_code": "library(autotest)\nnyc_job = read.csv('/data/NYC_Jobs.csv', stringsAsFactors=FALSE)\ntmp = as.numeric(plyr::mapvalues(nyc_job$Salary.Frequency, c('Annual', 'Daily', 'Hourly'), c(1, 260, 2080)))\ncorrect_answer = nyc_job %>% mutate(annual_salary_from = tmp * Salary.Range.From,\n                                    annual_salary_to = tmp * Salary.Range.To) %>%\n  group_by(Agency) %>%\n  summarise(mean_salary_from = mean(annual_salary_from),\n            median_salary_from = median(annual_salary_from),\n            mean_salary_to = mean(annual_salary_to),\n            median_salary_to = median(annual_salary_to))\n\ntest_that(\"test salary_summary\", {\n  expect_is(salary_summary, 'tbl_df')\n  expect_equal(salary_summary, correct_answer)\n})\n\ntest_that(\"test agency_best\", {\n  answer = correct_answer %>% arrange(-mean_salary_from) %>% .[[1, 'Agency']]\n  if (is.factor(agency_best)){\n    registerPostMsg('Set `stringsAsFactors=FALSE` in the `read.csv` function.')\n  }\n  expect_equal(agency_best, answer)\n})", "id": "57c5d5d8055886100005d681", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nlibrary(dplyr)\nnyc_job = read.csv('/data/NYC_Jobs.csv', stringsAsFactors=FALSE)\n# 1.\nyearly = function(frequency) {\n    ifelse(frequency == 'Hourly', 2080, ifelse(frequency == 'Daily', 260, 1))\n}\nposting_diff =  mutate(nyc_job, salary_range=(Salary.Range.To-Salary.Range.From) * yearly(Salary.Frequency)) %>%\n                  group_by(Posting.Type) %>%\n                  summarise(avg_salary_range = mean(salary_range), sd_salary_range = sd(salary_range))\n# 2. \nlevel_range = mutate(nyc_job, salary_range=(Salary.Range.To-Salary.Range.From) * yearly(Salary.Frequency)) %>% \n               group_by(Level) %>%\n               summarise(avg_salary_range = mean(salary_range)) %>%\n               arrange(desc(avg_salary_range))", "test_code": "library(autotest)\ntest_that(\"test salary_summary\", {\n  expect_is(posting_diff, 'tbl_df')\n  answer = data.frame(avg_salary_range=c(29137.45, 28073.55),\n                      Posting.Type=c('External', 'Internal'),\n                      sd_salary_range=c('27288.91', '26649.87'))\n  expect_equal(posting_diff, answer, tolerance=0.01)\n})\n\ntest_that(\"test agency_best\", {\n  expect_is(level_range, 'tbl_df')\n  answer = data.frame(Level=c(\"M6\", \"M5\", \"M7\", \"M3\", \"M2\", \"M1\", \"M4\", \"4B\", \"04\", \"4A\", \"00\", \"03\", \"3A\", \"1B\", \"02\", \"01\"),\n                      avg_salary_range=c(93224.143,84087.125,78819.25,76280.855,68189.966,61278.701,57034.303,37239,30083.386,23860.667,22723.568,21595.282,20393,19482,17944.088,16113.675))\n  expect_equal(level_range, answer)\n})", "id": "57c705a7d46fd5100032d743", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nlibrary(ggplot2)\ndata(cars)\n# 1. scatter plot\np_scatterplot = ggplot(cars, aes(x=speed, y=dist)) + geom_point()\n# 2. title & label\np_title = p_scatterplot + xlab('Speed (mpg)') + ylab('Stopping Distance (ft)') + ggtitle(\"Scatterplot of Speed/Distance\")\n# 3. \np_point = ggplot(cars, aes(x=speed, y=dist)) + geom_point(col=\"red\", pch=17) + xlab('Speed (mpg)') + ylab('Stopping Distance (ft)') + ggtitle(\"Scatterplot of Speed/Distance\")", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test p_scatterplot\", {\n  expect_is(p_scatterplot, 'ggplot')\n  expect_true(unlist(p_scatterplot)$mapping.x == 'speed')\n  expect_true(unlist(p_scatterplot)$mapping.y == 'dist')\n  expect_is(layer_grob(p_scatterplot)[[1]], 'points')\n})\n\ntest_that(\"test p_title\", {\n  expect_is(p_title, 'ggplot')\n  expect_true(unlist(p_title)$labels.x == 'Speed (mpg)')\n  expect_true(unlist(p_title)$labels.y == 'Stopping Distance (ft)')\n  expect_true(unlist(p_title)$labels.title == 'Scatterplot of Speed/Distance')\n})\n\ntest_that(\"test p_point\", {\n  expect_is(p_point, 'ggplot')\n  expect_true(all(layer_grob(p_point)[[1]]$pch == 17))\n  expect_true(all(layer_grob(p_point)[[1]]$gp$col == '#FF0000FF'))\n})", "id": "57c74b724c9d531000dec558", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nlibrary(ggplot2)\n# 1.\nfaithful$length = ifelse(faithful$eruption < 3.2, 'short', 'long')\n# 2.\np_box = ggplot(faithful, aes(x = length, y = waiting)) + geom_boxplot()\n# 3. \np_density = ggplot(faithful, aes(x = waiting, color = length)) + geom_density()", "test_code": "library(autotest)\ntest_that(\"test faithful$length\", {\n  answer = ifelse(faithful$eruption < 3.2, 'short', 'long')\n  expect_equal(faithful$length, answer)\n})\n\ntest_that(\"test boxplot\", {\n  expect_is(p_box, 'ggplot')\n  expect_true(\"length\" %in% unlist(p_box)$labels.x)\n  expect_true(\"waiting\" %in% unlist(p_box)$labels.y)\n  expect_match(layer_grob(p_box)[[1]]$name, \"geom_boxplot\")\n})\n\ntest_that(\"test density plot\", {\n  expect_is(p_density, 'ggplot')\n  expect_true(\"waiting\" %in% unlist(p_density)$labels.x)\n  expect_equal(unlist(p_density)$labels.y, 'density')\n  expect_match(layer_grob(p_density)[[1]]$name, \"geom_density\")\n})", "id": "57c75e424c9d531000dec55a", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!", "test_code": "###Test code!\nlibrary(autotest)\ntest_that('a minimal test', {\n    expect_equal(1, 1)\n})", "id": "57d6e3e9d33a500010b5ecb5", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nis_magic <- function(mat){\n    rsum = rowSums(mat)\n    csum = colSums(mat)\n    dsum = sum(diag(mat))\n    d2sum = sum(diag((mat[, c(ncol(mat):1)])))\n    all(abs(c(rsum, csum, dsum) - d2sum) < 1e-8)\n}", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test is_magic\", {\n  expect_false(is_magic(matrix(c(1, 2, 2, 1), nrow=2)))\n  expect_false(is_magic(diag(c(1, 1))))\n  expect_true(is_magic(matrix(c(23,28,21,22,24,26,27,20,25), nrow=3, byrow=T)))\n  expect_true(is_magic(matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)))\n})\n\n", "id": "57d6f58bd33a500010b5ece0", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "is_palindromic <- function(x){\n    vec = c()\n    while (x > 10){\n        vec = c(vec, x %% 10)\n        x = as.integer(x / 10)\n    }\n    vec = c(vec, x)\n    all(vec == rev(vec))\n}", "test_code": "###Test code!\nlibrary(autotest)\ntest_that('test is_palindromic', {\n    expect_true(is_palindromic(1))\n    expect_true(is_palindromic(11))\n    expect_true(is_palindromic(121))\n    expect_true(is_palindromic(12321))\n    expect_true(is_palindromic(1234321))\n    expect_true(is_palindromic(123454321))\n    expect_false(is_palindromic(12))\n    expect_false(is_palindromic(123))\n    expect_false(is_palindromic(12312))\n})", "id": "57d7fbdac354b10010faec05", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nm1 = matrix(1:6, nrow=2, ncol=3)\nm2 = matrix(7:18, nrow=4, ncol=3)\nm3 = rbind(m1, m2)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer_m1 = matrix(1:6, nrow=2, ncol=3)\nanswer_m2 = matrix(7:18, nrow=4, ncol=3)\nanswer_m3 = rbind(answer_m1, answer_m2)\ntest_that(\"test m1\", {\n  expect_equal(answer_m1, m1)\n})\n\ntest_that(\"test m2\", {\n  expect_equal(answer_m2, m2)\n})\n\ntest_that(\"test m3\", {\n  expect_equal(answer_m3, m3)\n})\n", "id": "57d815e1c354b10010faec1a", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\navg_weight = mean(Pet$weight)\nPet$weight = Pet$weight + 2", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test avg_weight\", {\n  expect_equal(avg_weight, 23 + 1/3)\n})\n\ntest_that(\"test Pet update\", {\n  expect_equal(Pet$weight, c(22, 12, 42))\n})", "id": "57d81fa9c354b10010faec1e", "pre_code": "Pet = list(Species = c('dog', 'cat', 'dog'), weight = c(20,10,40))"}, {"ans_code": "###Correct answer here!\nsapply_sd = sapply(iris[, 1:4], sd)\nlapply_sd = lapply(iris[, 1:4], sd)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer_sapply_sd = sapply(iris[, 1:4], sd)\nanswer_lapply_sd = lapply(iris[, 1:4], sd)\ntest_that(\"test sapply_sd\", {\n    expect_is(sapply_sd, 'numeric')\n    expect_equal(sapply_sd, answer_sapply_sd)\n})\ntest_that(\"test lapply_sd\", {\n    expect_is(lapply_sd, 'list')\n    expect_equal(lapply_sd, answer_lapply_sd)\n})", "id": "57d823c4c354b10010faec1f", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nlibrary(ggthemes)\nlibrary(ggplot2)\np = ggplot(mpg, aes(cty, hwy))\nfinal_plot = p + geom_point(aes(col=fl)) + geom_smooth() +\n  xlab('City miles per gallon') + \n  ylab('Highway miles per gallon') +\n  scale_color_discrete(name = \"FUEL\", labels =c('CNG', 'diesel', 'ethanol', 'premium', 'regular')) + \n  theme_wsj()\nggsave('result.png', dpi=500, width=5, height=3, units = 'in')", "test_code": "library(autotest)\ntest_that('', {\n  registerPostMsg('Did you save your plot to the file `result.png`?')\n  expect_true(file.exists('result.png'))\n  if (file.exists('result.png')) file.remove('result.png')\n})", "id": "58200148777561001075d40d", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "#Your test Answer\npaste_chars <- function(char_vec){\n    c(sapply(char_vec, paste0, char_vec)) # \tc(outer(char_vec, char_vec, paste0)) \n}", "test_code": "library(autotest)\ntest_that('test paste_chars',{\n  expect_equal(paste_chars(c(\"a\", \"b\")), c(\"aa\", \"ab\", \"ba\", \"bb\"))\n  expect_equal(paste_chars(c(\"a\", \"b\", \"c\")), c(\"aa\", \"ab\", \"ac\", \"ba\", \"bb\", \"bc\", \"ca\", \"cb\", \"cc\"))\n  expect_equal(paste_chars(c(\"1\", \"2\")), c(\"11\", \"12\", \"21\", \"22\"))\n  random_char_vec = sample(LETTERS, 5)\n  correct_ans = c(sapply(random_char_vec, paste0, random_char_vec))\n  registerPreMsg(\"Testing paste_chars(c('%s')): \",\n                 paste0(random_char_vec, collapse = \"', '\"))\n  expect_equal(paste_chars(random_char_vec), correct_ans, trace = FALSE)\n})", "id": "57bc96afdd426f1000e043cb", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "###Correct answer here!\nlibrary(ggplot2)\nload('/data/Knicks.rda') # load a data.frame 'knicks' \np = ggplot(knicks,aes(x=points)) + geom_histogram() + facet_grid(season~.)", "test_code": "library(autotest)\ntest_that('', {\n  expect_is(p, 'ggplot')\n  registerPreMsg('Testing the x axis of your plot:')\n  registerPostMsg('Did you map the `points` column on the x axis?')\n  expect_equal(unlist(p)$labels.x, 'points')\n  registerPreMsg('Testing whether you use the `facet` layer:')\n  registerPostMsg('Did you add the facet layer in your plot?')\n  expect_false(identical(p$facet, facet_null()))\n})", "id": "57c8583549232d10002822a8", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nlibrary(ggplot2)\ndata(cars)\np = ggplot(cars, aes(x=speed, y=dist)) + \n            geom_point() + \n            xlab('Speed (mph)') + \n            ylab('Stopping Distance (ft)') + \n            ggtitle(\"Scatterplot of Speed/Distance\")", "test_code": "library(autotest)\ntest_that(\"test p\", {\n  expect_is(p, 'ggplot')\n  registerPostMsg('Did you set the label on x axis to \"Speed (mph)\"?')\n  expect_true(unlist(p)$labels.x == 'Speed (mph)')\n\n  registerPostMsg('Did you set the label on y axis to \"Stopping Distance (ft)\"?')\n  expect_true(unlist(p)$labels.y == 'Stopping Distance (ft)')\n\n  registerPostMsg('Did you set the title to \"Scatterplot of Speed/Distance\"?')\n  expect_true(unlist(p)$labels.title == 'Scatterplot of Speed/Distance')\n})", "id": "581b1024da356d001055deff", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nPet = data.frame(species = c('dog', 'cat', 'dog'),weight = c(20,10,40))", "test_code": "library(autotest)\ntest_that(\"test Pet\", {\n  answer = data.frame(species=c('dog', 'cat', 'dog'), weight=c(20,10,40))\n  expect_equal(Pet, answer)\n})", "id": "58071ba56ea2580010fcf88f", "pre_code": "### Codes need to be pre-loaded!\noptions(stringsAsFactors=FALSE)"}, {"ans_code": "### Correct answer here!\nset.seed(123456)\nx = rnorm(10000)\ny = sample(x, 100)\nz = mean(x) - mean(y) ", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nset.seed(123456)\nx_answer = rnorm(10000)\ny_answer = sample(x_answer, 100)\nz_answer = mean(x_answer) - mean(y_answer) \n\ntest_that(\"test x\", {\n  expect_equal(x, x_answer)\n})\ntest_that(\"test y\", {\n  expect_equal(y, y_answer)\n})\ntest_that(\"test z\", {\n  expect_equal(z, z_answer)\n})", "id": "5808a00fbd502a00105f3c44", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nx1 = 5/2\nx2= 5 %/% 2\nx3= 3^(5 %/% 2)\nx4= (-3)^(5 %/% 2)\nx5= (-3)^(5 / 2)\n", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\ntest_that(\"test x1\", {\n  expect_equal(x1, 2.5)\n})\ntest_that(\"test x2\", {\n  expect_equal(x2, 2)\n})\ntest_that(\"test x3\", {\n  expect_equal(x3, 9)\n})\ntest_that(\"test x4\", {\n  expect_equal(x4, 9)\n})\ntest_that(\"test x5\", {\n  expect_equal(x5, NaN)\n})\n", "id": "5811a24db5c92bc1b3365c0f", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nset.seed(123)\nx_1 = rnorm(5)\nx_2 = 1:10\nx_3 = x_2[1:5]", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nset.seed(123)\nx_1_answer = rnorm(5)\ntest_that(\"test x_1\", {\n  expect_equal(x_1, x_1_answer)\n})\n\ntest_that(\"test x_2\", {\n  expect_equal(x_2, 1:10)\n})\n\ntest_that(\"test x_3\", {\n  expect_equal(x_3, 1:5)\n})", "id": "5808a230bd502a00105f3c45", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nmy_sum = x_1 + x_3\nproduct = x_1[1] * x_1[3]\nvec_sum = x_2 + c(1, 2)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nset.seed(123)\nx_1 = rnorm(5)\nx_2 = 1:10\nx_3 = x_2[1:5]\nmy_sum_answer = x_1 + x_3\nproduct_answer = x_1[1] * x_1[3]\nvec_sum_answer = x_2 + c(1, 2)\ntest_that(\"test my_sum\", {\n  expect_equal(my_sum, my_sum_answer)\n})\ntest_that(\"test product\", {\n  expect_equal(product, product_answer)\n})\ntest_that(\"test vec_sum\", {\n  expect_equal(vec_sum, vec_sum_answer)\n})", "id": "5811a67866cc43c1f7f5f291", "pre_code": "### Codes need to be pre-loaded!\nset.seed(123)\nx_1 = rnorm(5)\nx_2 = 1:10\nx_3 = x_2[1:5]"}, {"ans_code": "###Correct answer here!\nsort_iris = iris[order(-iris$Sepal.Length), ]", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test sort_iris\", {\n  expect_is(sort_iris, 'data.frame')\n  expect_equal(dim(sort_iris), c(150, 5))\n  expect_equal(sort_iris$Sepal.Length, sort(sort_iris$Sepal.Length, decreasing=T))\n})", "id": "57d819c6c354b10010faec1c", "pre_code": "###Codes need to be pre-loaded!\n"}, {"ans_code": "### Correct answer here!\ndays = c(\"Friday\", \"Sunday\", \"Monday\", \"Sunday\", \"Wednesday\")\ndays = factor(days, levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"), order=T)", "test_code": "library(autotest)\ntest_that(\"test days\", {\n  answer = factor(c(\"Friday\", \"Sunday\", \"Monday\", \"Sunday\", \"Wednesday\"),\n                 levels=c(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"),\n                 ordered=T)\n  expect_equal(days, answer)\n})", "id": "5816b866aefb2a0ef1ec80de", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nf = as.numeric(as.character(f))", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nf_answer = nums\ntest_that(\"test f\", {\n  expect_equal(f, f_answer)\n})", "id": "5816bccaaefb2a0ef1ec80df", "pre_code": "### Codes need to be pre-loaded!\nset.seed(123)\nnums = sample(1:1000, 30, replace=T)\nf = factor(nums)"}, {"ans_code": "### Correct answer here!\nlibrary(dplyr)\ninput_x = as.matrix(select(iris, -Species))", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer = as.matrix(select(iris, -Species))\ntest_that(\"test input\", {\n  expect_equal(input_x, answer)\n})", "id": "581956c849749d00107ae105", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Your code here!\nlibrary(dplyr)\nbirth = read.csv('/data/births.csv', stringsAsFactors=FALSE)\n\ngirls_90 = filter(birth, sex=='girl', year >= 1990, year <= 2000) # fill your code here", "test_code": "library(autotest)\ntest_that(\"test girls_90\", {\n  birth = read.csv('/data/births.csv', stringsAsFactors=FALSE)\n  answer = dplyr::filter(birth, sex=='girl', year >= 1990, year <= 2000) # fill your code here\n  expect_equal(girls_90, answer)\n})", "id": "58198202705163001070f640", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nbirths = read.csv('/data/births.csv', stringsAsFactors = FALSE)\nbirths = reshape2::dcast(births, year ~ sex, value.var=\"births\")\nlibrary(dplyr)\nbirths = mutate(births, ratio = boy / girl)\n\n", "test_code": "library(autotest)\ntest_that(\"test births\", {\n  BIRTHSBIRTHS = read.csv('/data/births.csv', stringsAsFactors = FALSE)\n  BIRTHSBIRTHS = reshape2::dcast(BIRTHSBIRTHS, year ~ sex, value.var=\"births\")\n  answer = mutate(BIRTHSBIRTHS, ratio = boy / girl)\n  expect_equal(births, answer)\n})", "id": "58199b8a705163001070f643", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "library(ggplot2)\ndata(cars)\n\np_scatterplot <- ggplot(data = cars, aes(x = speed, y = dist))\np_scatterplot <- p_scatterplot + geom_point()", "test_code": "library(autotest)\ntest_that(\"test p_scatterplot\", {\n  expect_is(p_scatterplot, 'ggplot')\n  registerPostMsg('Did you map the `speed` column on the x axis?')\n  expect_true(unlist(p_scatterplot)$labels.x == 'speed')\n  registerPostMsg('Did you map the `dist` column on the y axis?')\n  expect_true(unlist(p_scatterplot)$labels.y == 'dist')\n  registerPostMsg('Did you add a point layer?')\n  expect_is(layer_grob(p_scatterplot)[[1]], 'points')\n})", "id": "581b0f2dda356d001055defe", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nlibrary(ggplot2)\ndata(cars)\np = ggplot(cars, aes(x=speed, y=dist)) + geom_point(col=\"red\", pch=17) + xlab('Speed (mpg)') + ylab('Stopping Distance (ft)') + ggtitle(\"Scatterplot of Speed/Distance\")\nprint(p)", "test_code": "library(autotest)\ntest_that(\"test p\", {\n  expect_is(p, 'ggplot')\n  registerPostMsg('Did you change the point style by setting the `pch` argument?')\n  expect_true(all(layer_grob(p)[[1]]$pch == 17))\n})", "id": "581b1112da356d001055df00", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nlibrary(ggplot2)\nlibrary(dplyr)\n# 1. rows with best color & best clarity\ndiamonds_best = filter(diamonds, color=='D', clarity == 'IF')\n# 2. average price/gram in different quality\ndiamonds_price = group_by(diamonds_best, cut) %>% summarise(avg_price=mean(price / carat))\n# 3. bar plot\ndiamonds_bar = ggplot(diamonds_price, aes(cut, avg_price)) + geom_bar(stat=\"identity\")", "test_code": "library(autotest)\ntest_that(\"test diamonds_best\", {\n  expect_is(diamonds_best, 'tbl')\n  expect_equal(nrow(diamonds_best), 73)\n  expect_true(diamonds_best$clarity == 'IF')\n  expect_true(diamonds_best$color == 'D')\n})\n\ntest_that(\"test diamonds_price\", {\n  expect_is(diamonds_price, 'tbl')\n  expect_equal(nrow(diamonds_price), 5)\n  expect_equal(sort(diamonds_price$avg_price), c(4208,9034,10099,10877,11347), tolerance=1)\n})\n\ntest_that(\"test diamonds_bar\", {\n  expect_is(diamonds_bar, 'ggplot')\n  registerPostMsg('Did you map the `cut` column on the x axis?')\n  expect_true(unlist(diamonds_bar)$labels.x == 'cut')\n  registerPostMsg('Did you map the `avg_price` column on the y axis?')\n  expect_true(unlist(diamonds_bar)$labels.y == 'avg_price')\n  registerPostMsg('Are you making a bar plot?')\n  expect_is(unlist(diamonds_bar)$layer$geom, 'GeomBar')\n})", "id": "581c3a1b2aabbf6d2d23e2cc", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "root <- function(x){\n\tx ** 0.5\n}", "test_code": "library(autotest)\ntest_that('test root', {\n  expect_equal(root(1), 1)\n  expect_equal(root(4), 2)\n  expect_equal(root(9), 3)\n\n  # random\n  random_number = abs(rnorm(1))\n  answer = random_number ** 0.5\n  registerPreMsg('In testing root(%s)', random_number)\n  expect_equal(root(random_number), answer, trace=FALSE)\n\n  # negtive\n  negtive_number = -abs(rnorm(1))\n  registerPreMsg('In testing root(%s)', negtive_number)\n  expect_equal(root(negtive_number), NaN, trace=FALSE)\n})", "id": "57b73ec8fb03d11000cc7eef", "pre_code": "#Code need to be loaded before!"}, {"ans_code": "### Correct answer here!\ndf = read.csv('/data/Advertising.csv')\nmodel = lm(Sales ~. - X, data=df)\nsummary(model)", "test_code": "library(autotest)\ntest_that('test model',{\n  expect_is(model, 'lm')\n  model$coefficients = model$coefficients[order(names(model$coefficients))]\n  registerPreMsg('Testing the predictors you are using:')\n  expect_equal(names(model$coefficients), c(\"(Intercept)\", \"Newspaper\", \"Radio\", \"TV\"))\n  registerPreMsg('Testing the number of observations you are using:')\n  expect_equal(length(model$residuals), 200)\n})", "id": "582446a87b4aab00136be0c4", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\n\nmissing_row = sum(!complete.cases(titanic3))\n\nmissing_cell = sum(is.na(titanic3))\n", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer_missing_row = sum(!complete.cases(titanic3))\nanswer_missing_cell = sum(is.na(titanic3))\n\ntest_that(\"How many observations contain at least one missing value?\", \n{\n  expect_equal(missing_row, answer_missing_row)\n})\n\ntest_that(\"How many cells in the data are missing values?\",\n{\n  expect_equal(missing_cell, answer_missing_cell)\n})", "id": "582b2c640f12320013935838", "pre_code": "### Codes need to be pre-loaded!\nlibrary(PASWR)"}, {"ans_code": "### Correct answer here!\nlibrary(MASS)\nmodel = lm(Hwt ~ Bwt, data = cats)\ncoefficients = model$coefficients", "test_code": "library(autotest)\ntest_that(\"Regress heart weight onto body weight\", {\n  expect_equal(coefficients, lm(Hwt ~ Bwt, data = cats)$coefficients, tolerance = .01)\n})", "id": "582b41410f12320013935848", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nmodel = lm(Hwt ~ Bwt, data = cats)\nbc = boxcox(model, plotit = FALSE)\nlambda = bc$x[bc$y == max(bc$y)]", "test_code": "library(autotest)\nmodel_soln = lm(Hwt ~ Bwt, data = cats)\nbc_soln = boxcox(model_soln, plotit = FALSE)\ntest_that(\"The best value of lambda\", {\n  expect_equal(lambda, bc_soln$x[bc_soln$y == max(bc_soln$y)], tolerance = .01)\n})", "id": "582b94eacb6dc500134c3cee", "pre_code": "### Codes need to be pre-loaded!\nlibrary(MASS)\n"}, {"ans_code": "### Correct answer here!\nlibrary(dplyr)\nbirth = read.csv('/data/births.csv', stringsAsFactors=FALSE)\nbirth_sort = arrange(birth, -year)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer = arrange(birth, -year)\ntest_that(\"test birth_sort\", {\n  expect_equal(birth_sort, answer)\n})", "id": "58198fee705163001070f642", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\n\nfaithful.scaled = scale(faithful)\n\nfaithTwo <- kmeans(faithful.scaled, centers = 2)\n\ntotalWithinSumSquare = sum(faithTwo$withinss)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\n# faithful.scaled = scale(faithful)\n# faithcluster_soln <- kmeans(faithful.scaled, centers = 2)\nanswer = 79.2834\n\ntest_that(\"The best value of lambda\", {\n  expect_equal(totalWithinSumSquare, answer)\n})", "id": "58332ad1bb0ef200133a88d8", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\n\niris.scaled = scale(iris[, -5])\nd = dist(iris.scaled)\nfit.complete = hclust(d, method = \"complete\")\nclusters.average = cutree(fit.complete, k = 3)\nmaxObs = max(table(clusters.average))", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\niris.scaled_soln = scale(iris[, -5])\nd_soln = dist(iris.scaled_soln)\nfit.complete_soln = hclust(d_soln, method = \"complete\")\nclusters.average_soln = cutree(fit.complete_soln, k = 3)\n\ntest_that(\"test sub question 1\", {\n  expect_true(maxObs == max(table(clusters.average_soln)))\n})\n", "id": "58347ab28e50d900133d8c6c", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\ntrain = read.csv('/data/titanic.csv')\ntest = read.csv('/data/titanic_test.csv')\ntrain$age2 = cut(train$age, breaks = c(0, 6, 15, 60, 200))\ntest$age2 = cut(test$age, breaks = c(0, 6, 15, 60, 200))\n\nlr_model = glm(survived ~ sex + age2 + as.factor(pclass) + sibsp + as.factor(embarked) - 1 + parch, data = train, family='binomial')\npredictions = as.numeric(predict(lr_model, test, type='response') > 0.5)", "test_code": "library(autotest)\n\ntest_that(\"test lr_model\", {\n  expect_is(lr_model, 'glm')\n  expect_equal(lr_model$family$family, 'binomial')\n})\npredictions = as.numeric(predict(lr_model, test, type='response') > 0.5)\ntrue_survived = as.numeric(readLines('/data/t11.23'))\naccuracy = mean(predictions==true_survived, na.rm=T)\nsprintf('The accuracy of your accuracy is: %.2f%%', accuracy * 100)\ntest_that(\"test predictions\", {\n  registerPreMsg('Is your accurancy greater than 75%%?')\n  expect_true(mean(predictions==true_survived, na.rm=T) > 0.75, trace = F)\n})\n\nif (accuracy > 0.75){\n  test_that(\"test predictions\", {\n    registerPreMsg('Is your accurancy greater than 78%%?')\n    expect_true(mean(predictions==true_survived, na.rm=T) > 0.78, trace=F)\n  })\n  if (accuracy > 0.78) {\n    test_that(\"test predictions\", {\n      registerPreMsg('Is your accurancy greater than 80%%?')\n      expect_true(mean(predictions==true_survived, na.rm=T) > 0.80, trace=F)\n    })\n  }\n}", "id": "58355fdfe3898e00133ddbf1", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nlr_model = glm(Species ~ . , data=iris, family = 'binomial')\ncoefficients = lr_model$coefficients", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer = glm(Species ~ . , data=iris, family = 'binomial')$coefficients\ntest_that(\"test coefficients\", {\n  expect_equal(coefficients, answer)\n})", "id": "583663b7c6ede60013608c6d", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nAdvertising = read.csv('/data/Advertising.csv')\n# fit a linear regression model using glm\nglm_model = glm(Sales ~ . - X, data=Advertising,family=gaussian)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\ncoefficiends = sort((lm(Sales ~ . - X, data=Advertising)$coefficients))\ntest_that(\"test glm_model\", {\n  expect_is(glm_model, 'glm')\n  expect_equal(glm_model$family$family, 'gaussian')\n  expect_equal(sort(glm_model$coefficients), coefficiends)\n})", "id": "583666bac6ede60013608c70", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nlibrary(e1071)\ntrain = read.csv('/data/titanic.csv')\ntest = read.csv('/data/titanic_test.csv')\ntrain = train[complete.cases(train), ]\ntest = test[complete.cases(test),]\nmodel = svm(as.factor(survived) ~ sex + age + fare + sibsp + parch + as.factor(pclass) + as.factor(embarked) , \n            data = train, cost=1e4, gamma=0.1)\npredictions = predict(model, test)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\ntest_survived = as.numeric(readLines('/data/t11.23'))[complete.cases(read.csv('/data/titanic_test.csv'))]\ntest_that(\"test model\", {\n  expect_is(model, 'svm')\n})\n\npredictions = predict(model, test)\naccuracy = mean(test_survived == predictions, na.rm=T)\nsprintf('The accuracy of your submission is: %.2f%%', 100 * accuracy)\ntest_that(\"test predictions\", {\n  expect_true(mean(test_survived == predictions, na.rm=T) > 0.8)\n})\n\nif (accuracy > 0.8) {\n    test_that(\"test predictions\", {\n        expect_true(mean(test_survived == predictions, na.rm=T) > 0.82)\n    })   \n    if (accuracy > 0.82) {\n        test_that(\"test predictions\", {\n            expect_true(mean(test_survived == predictions, na.rm=T) > 0.84)\n        })       \n    }\n}", "id": "58368dffc6ede60013608c8a", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nx <- 'Hello, I am'\ny <- '# fill your name here'\ncat(x, y)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\ntest_that(\"test x\", {\n  expect_equal(x, 'Hello, I am')\n})\ntest_that(\"test y\", {\n  expect_is(y, 'character')\n})", "id": "57d7029fd33a500010b5ecec", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nPet = list(species = c('dog', 'cat', 'dog'),weight = c(20,10,40))", "test_code": "library(autotest)\ntest_that(\"test Pet\", {\n  expect_equal(Pet, list(species=c('dog', 'cat', 'dog'),\n                         weight=c(20,10,40)))\n})", "id": "57d8178bc354b10010faec1b", "pre_code": "###Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nint2 = seq(2, 100, by=2)\nint3 = seq(3, 100, by=3)\nint6 = seq(6, 100, by=6)\nint23 = sort(union(int2, int3))", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nint2_answer = seq(2, 100, by=2)\nint3_answer = seq(3, 100, by=3)\nint6_answer = seq(6, 100, by=6)\nint23_answer = sort(union(int2_answer, int3_answer))\n\ntest_that(\"test int2\", {\n  expect_equal(int2, int2_answer)\n})\n\ntest_that(\"test int3\", {\n  expect_equal(int3, int3_answer)\n})\n\ntest_that(\"test int6\", {\n  expect_equal(int6, int6_answer)\n})\n\ntest_that(\"test int23\", {\n  expect_equal(int23, int23_answer)\n})", "id": "58089cc3bd502a00105f3c43", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nf <- function(a, b){\n    if (a == b){\n        res = ifelse(a == 'betray', 'Each serves 2 years', 'Each serves 1 year')\n    }else{\n        res = ifelse(a=='betray', 'A: free; B: 3 years', 'A: 3 years; B: free')\n    }\n    return(res)\n}", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test f\", {\n  expect_equal(f(a='betray', b='betray'), \"Each serves 2 years\")\n  expect_equal(f(a='silent', b='silent'), \"Each serves 1 year\")\n  expect_equal(f(a='silent', b='betray'), \"A: 3 years; B: free\")\n  expect_equal(f(a='betray', b='silent'), \"A: free; B: 3 years\")\n})", "id": "5816deafd10f540f5c09be6b", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\n\ntitanic.rules <- apriori(titanic.df,\n                         parameter = list(minlen=3,\n                                          supp=0.02, \n                                          conf=.5),\n                         appearance = list(rhs=\"Survived=Yes\",\n                                           default=\"lhs\"),\n                         control = list(verbose=F))\n\nsetitem <- data.frame(inspect(titanic.rules))[1,\"lhs\"]\n\nsupport <- titanic.rules@quality$support[1]\n", "test_code": "library(autotest)\ntest_that(\"test lhs setitem\", {\n  setitem = as.character(setitem)\n  expect_equal(setitem, \"{Class=2nd,Sex=Female}\")\n})\n\ntest_that(\"test support\", {\n  expect_equal(support, 0.04225352)\n})", "id": "583dbf7f502acf00131240c8", "pre_code": "### Codes need to be pre-loaded!\nlibrary(arules)\n\ntitanic.raw <- data.frame(Titanic)\nidx <- rep(1:nrow(titanic.raw), times = titanic.raw$Freq)\ntitanic.df <- titanic.raw[idx, -length(titanic.raw)]\nrownames(titanic.df) <- NULL\nset.seed(0)\ntitanic.df <- titanic.df[sample(nrow(titanic.df)),]\n"}, {"ans_code": "### Correct answer here!\nlibrary(e1071)\ntrainIdx <- c(1:30, 51:80, 101:130)\niris.train <- iris[trainIdx,]\niris.test <- iris[-trainIdx,]\n\niris.nb <- naiveBayes(iris.train[, 1:4], iris.train$Species, laplace = 0)\ntbl <- table(predict(iris.nb, iris.test), iris.test$Species)\naccuracy <- sum(diag(tbl)) / sum(tbl)", "test_code": "library(autotest)\ntest_that(\"test accuracy\", {\n  expect_equal(accuracy, 0.96667)\n})", "id": "583c8052cacb9c0013d4c98d", "pre_code": "### Codes need to be pre-loaded!\n\n"}, {"ans_code": "### Correct answer here!\nairquality = as.data.frame(lapply(airquality, function(x) {x[is.na(x)] = mean(x, na.rm=T); x}))", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer_airquality = as.data.frame(lapply(airquality, function(x) {x[is.na(x)] = mean(x, na.rm=T); x}))\ntest_that(\"test airquality\", {\n  expect_is(airquality, 'data.frame')\n  expect_true(all(complete.cases(airquality)))\n  expect_equal(airquality, answer_airquality)\n})", "id": "583fc94dfa502200139bd219", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nmissing_cols = names(airquality)[sapply(airquality, function(x) sum(is.na(x)) > 0)]\nairquality = VIM::kNN(airquality, missing_cols, k = 10)", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nairquality_answer = VIM::kNN(airquality, c(\"Ozone\", \"Solar.R\"), k = 10)\ntest_that(\"test airquality\", {\n  expect_is(airquality, 'data.frame')\n  expect_true(all(complete.cases(airquality)))\n  expect_equal(airquality[c(\"Ozone\",\"Solar.R\",\"Wind\",\"Temp\",\"Month\",\"Day\")], \n               airquality_answer[c(\"Ozone\",\"Solar.R\",\"Wind\",\"Temp\",\"Month\",\"Day\")])\n})", "id": "583fcf7cfa502200139bd21e", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nget_distance <- function(features, centroid){\n    m = nrow(centroid)\n    n = ncol(centroid)\n    distance = apply(features, 1, function(x) rowSums((matrix(x, m, n, byrow=TRUE) - centroid)^2) ^ 0.5)\n    return(matrix(distance, nrow=nrow(features), ncol=m, byrow=T))\n}", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nget_distance_answer <- function(features, centroid){\n    m = nrow(centroid)\n    n = ncol(centroid)\n    distance = apply(features, 1, function(x) rowSums((matrix(x, m, n, byrow=TRUE) - centroid)^2) ^ 0.5)\n    return(matrix(distance, nrow=nrow(features), ncol=m, byrow=T))\n}\n\ntest_that(\"test get_distance\", {\n  m = matrix(1:9, 3)\n  centroid = matrix(m[1,] ,1)\n  expect_equal(dim(get_distance(matrix(1:9, 3), matrix(c(1,4,7), 1))), c(3, 1))\n  expect_equal(get_distance(matrix(1:9, 3), matrix(c(1,4,7), 1)), matrix(c(0, 1.732051, 3.464102), ncol=1), tolerance=1e-5)\n})\n\n\ntest_that(\"test get_distance\", {\n  n = sample(3:8, 1)\n  centroid = as.matrix(iris[sample(1:150, n), 1:4])\n  expect_equal(get_distance(as.matrix(iris[, 1:4]), centroid), get_distance_answer(as.matrix(iris[, 1:4]), centroid), tolerance=1e-5)\n})", "id": "583fe950198117001357e55e", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\ninitial_centroids <- function(obs, n){\n    # fill your code here\n    index = sample(1:nrow(obs), n)\n    obs[index, ]\n}", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nrandom_int = sample(1:150, 1)\n\ntest_that(\"test initial_centroids\", {\n  expect_is(initial_centroids, 'function')\n  expect_equal(nrow(initial_centroids(iris, 0)), 0)\n  expect_equal(nrow(initial_centroids(iris, random_int)), random_int)\n  expect_equal(nrow(merge(initial_centroids(iris, random_int), iris, all=T)), 150)\n})", "id": "583fe301198117001357e55d", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nget_label <- function(mat){\n    apply(mat, 1, which.min)\n}", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nanswer_get_label <- function(mat){\n    apply(mat, 1, which.min)\n}\nrandom_mat = matrix(rnorm(300), nrow=5)\ntest_that(\"test get_label\", {\n  expect_is(get_label, 'function')\n  expect_equal(get_label(random_mat), answer_get_label(random_mat))\n})\n", "id": "583feb76198117001357e560", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nkmeans <- function(data, n, max_iter=300){\n    # data: a data frame or matrix with dimension: m x k\n    # n: a integer\n    # return: a list containing: \"centroids\" (a matrix with dimension n x k); \"labels\" (a vector with length m)\n    centroids = initial_centroids(data, n)\n    iter = 0\n    while (iter <= max_iter){\n        iter = iter + 1\n        distance = get_distance(as.matrix(data), centroids)\n        labels = get_label(distance)\n        new_centroids = get_centroid(as.matrix(data), labels)\n        if (all(centroids == new_centroids)){\n            break\n        }else{\n            centroids = new_centroids\n        }\n    }\n    return(list(centroids=centroids, labels=labels))\n}\n\n", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test kmeans\", {\n  random_mat = matrix(rnorm(300), 60)\n  group_number = sample(1:8, 1)\n  expect_is(kmeans(random_mat, group_number), 'list')\n  expect_equal(length(unique(kmeans(random_mat, group_number)$labels)), group_number)\n  expect_equal(dim(kmeans(random_mat, group_number)$centroids), c(group_number, ncol(random_mat)))\n})", "id": "583ff8b9198117001357e562", "pre_code": "### Codes need to be pre-loaded!\n### Correct answer here!\ninitial_centroids <- function(obs, n){\n    # fill your code here\n    index = sample(1:nrow(obs), n)\n    obs[index, ]\n}\nget_distance <- function(features, centroid){\n    m = nrow(centroid)\n    n = ncol(centroid)\n    distance = apply(features, 1, function(x) rowSums((matrix(x, m, n, byrow=TRUE) - centroid)^2) ^ 0.5)\n    return(matrix(distance, nrow=nrow(features), ncol=m, byrow=T))\n}\nget_label <- function(mat){\n    labels = apply(mat, 1, which.min)\n    return(labels)\n}\nget_centroid <- function(features, label){\n    t(sapply(split(as.data.frame(features), label), colMeans))\n}"}, {"ans_code": "###Correct answer here!\nlibrary(ggplot2)\nlibrary(dplyr)\nload('/data/Knicks.rda') # load a data.frame 'knicks' \n# 1. \nseason_win_ratio = group_by(knicks, season) %>% summarise(ratio=mean(win==\"W\"))\nseason_win_bar <- ggplot(season_win_ratio, aes(x=season, y=ratio)) + geom_bar(stat='identity')\n\n# 2.\nvisit_win_ratio = group_by(knicks, season, visiting) %>% summarise(ratio=mean(win==\"W\"))\nvisit_win_bar = ggplot(visit_win_ratio, aes(x=season, y=ratio, fill=visiting)) + geom_bar(stat='identity',position='dodge')", "test_code": "library(autotest)\ntest_that(\"test season_win_ratio\", {\n  expect_is(season_win_ratio, 'tbl_df')\n  answer = group_by(knicks, season) %>% summarise(ratio=mean(win==\"W\"))\n  expect_equal(season_win_ratio, answer)\n})\n\ntest_that('test season_win_bar', {\n  expect_is(season_win_bar, 'ggplot')\n  expect_true(unlist(season_win_bar)$labels.x == 'season')\n  expect_true(unlist(season_win_bar)$labels.y == 'ratio')\n  expect_is(layer_grob(season_win_bar)[[1]], 'rect')\n})\n\ntest_that(\"test visit_win_ratio\", {\n  expect_is(visit_win_ratio, 'tbl_df')\n  answer = group_by(knicks, season, visiting) %>% summarise(ratio=mean(win==\"W\"))\n  expect_equal(visit_win_ratio, answer)\n})\n\ntest_that('test visit_win_bar', {\n  expect_is(visit_win_bar, 'ggplot')\n  expect_true(unlist(visit_win_bar)$labels.x == 'season')\n  expect_true(unlist(visit_win_bar)$labels.y == 'ratio')\n  expect_is(layer_grob(visit_win_bar)[[1]], 'rect')\n})", "id": "57c75e634c9d531000dec55b", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nlibrary(ggplot2)\np = ggplot(mpg, aes(cty, hwy))\np = p + geom_point(aes(col=fl)) + geom_smooth() + labs(x='City miles per gallon', y='Highway miles per gallon')", "test_code": "library(autotest)\ntest_that('',{\n  registerPostMsg('Did you set the label on the x axis?')\n  expect_equal(unlist(p)$labels.x, 'City miles per gallon')\n  registerPostMsg('Did you set the label on the y axis?')\n  expect_equal(unlist(p)$labels.y, 'Highway miles per gallon')\n})", "id": "581ffaea777561001075d40a", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "###Correct answer here!\nlibrary(dplyr)\nnyc_job = read.csv('/data/NYC_Jobs.csv', stringsAsFactors=FALSE)\n\nyearly = function(frequency) {\n    ifelse(frequency == 'Hourly', 2080, ifelse(frequency == 'Daily', 260, 1))\n}\n    \n# 1. \nagency_spent = nyc_job %>% mutate(range = X..Of.Positions*(Salary.Range.To - Salary.Range.From) * yearly(Salary.Frequency)) %>%\n               group_by(Agency) %>%\n               summarise(salary_range_total=max(range) - min(range)) # Original: summarise(salary_range_total=sum(range))\n\n# 2. \ncivil_range = nyc_job %>% mutate(salary_range=(Salary.Range.To - Salary.Range.From) * yearly(Salary.Frequency)) %>%\n  group_by(Civil.Service.Title) %>%\n  summarise(max_salary_range=max(salary_range)) %>%\n  arrange(desc(max_salary_range)) %>%\n  top_n(1)", "test_code": "library(autotest)\nyearly = function(frequency) {\n  ifelse(frequency == 'Hourly', 2080, ifelse(frequency == 'Daily', 260, 1))\n}\ncorrect_salary_range_total = nyc_job %>% mutate(range = X..Of.Positions*(Salary.Range.To - Salary.Range.From) * yearly(Salary.Frequency)) %>%\n  group_by(Agency) %>%\n  summarise(salary_range_total=max(range) - min(range))\n\ntest_that(\"test agency_spent\", {\n  expect_is(agency_spent, 'tbl_df')\n  expect_equal(agency_spent, correct_salary_range_total)\n})\n\ntest_that(\"test civil_range\", {\n  expect_is(civil_range, 'tbl_df')\n  answer = data.frame(\n    Civil.Service.Title= 'COMPUTER SYSTEMS MANAGER',\n    max_salary_range = 121852\n  )\n  expect_equal(civil_range, answer)\n})", "id": "57c705bfd46fd5100032d744", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\ngcdIter <- function(a, b){\n    large = max(a, b)\n    small = min(a, b)\n    divisor = small\n    while (large %% divisor != 0 || small %% divisor != 0){\n        divisor = divisor - 1\n    }\n    return(divisor)\n}\n", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\ntest_that(\"test sub question 1\", {\n  expect_equal(gcdIter(1, 1), 1)\n  expect_equal(gcdIter(2, 3), 1)\n  expect_equal(gcdIter(3, 5), 1)\n  expect_equal(gcdIter(187, 85), 17)\n  expect_equal(gcdIter(57, 33), 3) \n  expect_equal(gcdIter(179, 179), 179)\n})", "id": "5813046f8fd7410010d59048", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nget_centroid <- function(features, label){\n    t(sapply(split(as.data.frame(features), label), colMeans))\n}", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\nrandom_label = sample(1:3, 150, T)\nanswer_get_centroid <- function(features, label){\n    t(sapply(split(as.data.frame(features), label), colMeans))\n}\ntest_that(\"test get_centroid\", {\n  expect_is(get_centroid, 'function')\n  answer = answer_get_centroid(as.matrix(iris[, 1:4]),random_label)\n  expect_equal(get_centroid(as.matrix(iris[, 1:4]),random_label), answer)\n})", "id": "583ff024198117001357e561", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\n\n## load data\nboston <- Boston\n## scale data\nmaxs <- apply(boston, 2, max) \nmins <- apply(boston, 2, min)\nbos_scaled <- as.data.frame(scale(boston, center = mins, scale = maxs - mins))\n## split data\nset.seed(123)\nindex <- sample(1:nrow(bos_scaled),round(0.8*nrow(bos_scaled)))\nbos_train <- bos_scaled[index,]\nbos_test <- bos_scaled[-index,]\n## create formula\nmedv <- length(boston)\nf <- as.formula(paste(\"medv ~\", \n                      paste(names(boston[,-medv]), \n                            collapse = \" + \")))\n## train model\nnn1 <- neuralnet(f,data=bos_train,hidden=c(20),linear.output=T)\nnn2 <- neuralnet(f,data=bos_train,hidden=c(10,10,5),linear.output=T)\n## predict\npr.nn1 <- compute(nn1,bos_test[,-medv])\npr.nn2 <- compute(nn2,bos_test[,-medv])\n## calculate accuracy\nMSE.nn1 <- sum((bos_test[,medv] - pr.nn1$net.result)^2)*diff(range(boston$medv))^2/nrow(bos_test)\nMSE.nn2 <- sum((bos_test[,medv] - pr.nn2$net.result)^2)*diff(range(boston$medv))^2/nrow(bos_test)\n\n# lm_fit <- lm(medv ~ ., data = boston[index,])\n# MSE.nn1 <- sum((boston$medv[-index] - predict(lm_fit, newdata = boston[-index,]))^2)/length(boston$medv[-index])\n", "test_code": "# Test code goes here!\nlibrary(autotest)\n# refer: http://r-pkgs.had.co.nz/tests.html\ncontext(\" \") # any info about this question\n\nsprintf('The MSE of your first model is: %s', MSE.nn1)\nsprintf('The MSE of your second model is: %s', MSE.nn2)\n\ntest_that(\"test Model 1 MSE\", {\n  expect_true(abs(MSE.nn1 - 6.77327) < 0.001)\n})\n\ntest_that(\"test Model 2 MSE\", {\n  expect_true(abs(MSE.nn2 - 5.4) < 0.001)\n})", "id": "5841985ee61479001375e448", "pre_code": "### Codes need to be pre-loaded!\nlibrary(MASS)\nlibrary(neuralnet)\nBoston = head(Boston, 200)"}, {"ans_code": "### Correct answer here!\ntitanic = read.csv('/data/titanic.csv')\nlr_model = glm(survived ~ as.factor(pclass) + sex + age, data = titanic, family='binomial')", "test_code": "library(autotest)\nanswer = glm(survived ~ as.factor(pclass) + sex + age, data = titanic, family='binomial')\ncoefficients = sort(as.numeric(answer$coefficients))\n\ntest_that(\"lr_model\", {\n  expect_is(lr_model, 'glm')\n  registerPreMsg('Testing the link function you are using:')\n  expect_equal(lr_model$family$family, 'binomial')\n\n  registerPreMsg('Testing the number of predictors:')\n  expect_length(lr_model$coefficient, 5)\n\n  registerPreMsg('Testing the coefficients:')\n  expect_equal(sort(as.numeric(lr_model$coefficient)), coefficients)\n\n  registerPreMsg('Testing the predictions:')\n  expect_equal(lr_model$y, answer$y)\n})", "id": "583551cee3898e00133ddbef", "pre_code": "### Codes need to be pre-loaded!"}, {"ans_code": "### Correct answer here!\nf = function(x) x+1", "test_code": "# Test code goes here!\nlibrary(autotest)\n# doc: http://autotest-docs.readthedocs.io/en/latest/R/index.html\ntest_that('',{\n  for (i in rnorm(100) * runif(100, -100, 100)){\n    registerPreMsg('In testing f(%f)', i) # better\n    expect_equal(f(i), i + 1)\n  }\n})", "id": "58a2ff177a2f8917b527df41", "pre_code": "### Codes need to be pre-loaded!"}]